angular.module("mapModule", [ "ui.map" ]);

"use strict";

angular.module("mapModule").controller("MapModuleController", [ "$scope", "$http", "$rootScope", "mapModuleInterface", function($scope, $http, $rootScope, mapModuleInterface) {
    $scope.meetings = [];
    var loadMarkerData = function() {
        var meetingsList = mapModuleInterface.getMarkerData("MapModuleController.loadMarkerData");
        angular.forEach($scope.meetings, function(meeting) {
            meeting.marker.setMap(null);
        });
        console.log("mapModule.loadMarkerData", meetingsList.length);
        angular.forEach(meetingsList, function(meeting) {
            var marker = new google.maps.Marker({
                map: $scope.map,
                position: new google.maps.LatLng(meeting.location.center.latitude, meeting.location.center.longitude),
                icon: {
                    url: "assets/images/" + meeting.fellowship.abbrevName + "pin" + (meeting.schedule.isSoon ? "-soon" : "") + ".png"
                },
                shadow: {
                    url: "assets/images/" + meeting.fellowship.abbrevName + "pin-shadow.png"
                }
            });
            angular.extend(meeting, {
                marker: marker
            });
        });
        $scope.meetings = meetingsList;
    };
    $scope.openMarkerInfo = function(meeting) {
        $scope.currentMeeting = meeting;
        $scope.myInfoWindow.open($scope.map, meeting.marker, meeting);
    };
    $scope.mapOptions = mapModuleInterface.getDefaultMapOptions();
    var setCurrentLocationMarker = function(latLng) {
        if (angular.isDefined($scope.currentLocationMarker)) {
            $scope.currentLocationMarker.setMap(null);
            $scope.currentLocationMarker = null;
        }
        $scope.currentLocationMarker = new google.maps.Marker({
            map: $scope.map,
            position: latLng,
            icon: "http://www.google.com/mapfiles/marker.png",
            shadow: "http://www.google.com/mapfiles/shadow50.png"
        });
    };
    var setMapCenter = function() {
        if (angular.isDefined(mapModuleInterface.getCurrentLocationLatLng())) {
            $scope.map.setCenter(mapModuleInterface.getCurrentLocationLatLng());
            setCurrentLocationMarker(mapModuleInterface.getCurrentLocationLatLng());
            loadMarkerData();
        }
    };
    $scope.updateMapBounds = function() {
        console.log("update map bounds");
        mapModuleInterface.setMapBounds($scope.map.getBounds());
    };
    $scope.$watch("map", function() {
        if (angular.isDefined($scope.map)) {
            console.log("map ready");
            mapModuleInterface.addListenerToLoadMarkerData(loadMarkerData);
            mapModuleInterface.addListenerToChangeCurrentLocation(setMapCenter);
            $http.get("assets/styles/mapStyle.json").success(function(data, status) {
                $scope.map.setOptions({
                    styles: data
                });
            }).error(function(data, status) {
                console.error("http mapStyle FAILURE", data, status);
            });
        }
    });
} ]);

"use strict";

angular.module("mapModule").controller("MeetingDetailSmallCtrl", [ "$scope", function($scope) {
    if (angular.isDefined($scope.currentMeeting)) {
        $scope.meeting = $scope.currentMeeting;
    }
} ]);

"use strict";

angular.module("mapModule").factory("mapService", [ "$rootScope", function($rootScope) {
    var serviceAPI = {};
    serviceAPI = angular.extend(serviceAPI, {});
    return serviceAPI;
} ]);

angular.module("filterModule", [ "ui.showhide" ]);

"use strict";

angular.module("filterModule").controller("FilterModuleController", [ "$scope", "filterService", "$filter", function($scope, filterService, $filter) {
    $scope.locationFilter = filterService.getLocationFilter();
    $scope.findMeetings = function() {
        console.log("MeetingFiltersCtrl.findMeetings", $scope.locationFilter.customAddress);
        filterService.setLocationFilter($scope.locationFilter);
        filterService.doSearch();
    };
    $scope.clickGeolocation = function() {
        console.log("MeetingFiltersCtrl.clickGeolocation");
        $scope.locationFilter.useGeolocation = !$scope.locationFilter.useGeolocation;
        if ($scope.locationFilter.useGeolocation) {
            $scope.locationFilter.customAddress = "";
        }
    };
    $scope.dayFilterItems = [ {
        display: "m",
        selected: false,
        filter: "MO"
    }, {
        display: "t",
        selected: false,
        filter: "TU"
    }, {
        display: "w",
        selected: false,
        filter: "WE"
    }, {
        display: "t",
        selected: false,
        filter: "TH"
    }, {
        display: "f",
        selected: false,
        filter: "FR"
    }, {
        display: "s",
        selected: false,
        ngClass: "weekend",
        filter: "SA"
    }, {
        display: "s",
        selected: false,
        ngClass: "weekend",
        filter: "SU"
    } ];
    $scope.onDayFilterChanged = function(selectedFilters) {
        console.log("onDayFilterChanged in MeetingFiltersCtrl", selectedFilters);
        var filterFunction = function(item) {
            return $filter("filter")(selectedFilters, item.schedule.dayAbbrev).length > 0;
        };
        filterService.setDayFilter(filterFunction);
    };
    $scope.fellowshipFilterItems = [ {
        display: "Narcotics Anonymous",
        selected: false,
        filter: "NA"
    }, {
        display: "Alcoholics Anonymous",
        selected: false,
        filter: "AA"
    } ];
    $scope.onFellowshipFilterChanged = function(selectedFilters) {
        console.log("onFellowshipFilterChanged in MeetingFiltersCtrl", selectedFilters);
        var filterFunction = function(item) {
            return $filter("filter")(selectedFilters, item.fellowship.abbrevName).length > 0;
        };
        filterService.setFellowshipFilter(filterFunction);
    };
    $scope.timeFilterItems = [ {
        display: "morning",
        filter: {
            start: 600,
            end: 1200
        },
        selected: false
    }, {
        display: "afternoon",
        filter: {
            start: 1200,
            end: 1700
        },
        selected: false
    }, {
        display: "evening",
        filter: {
            start: 1700,
            end: 2e3
        },
        selected: false
    }, {
        display: "night",
        filter: {
            start: 2e3,
            end: 600
        },
        selected: false
    } ];
    var isTimeBetween = function(timeAsNumber, start, end) {
        if (end < start) {
            return isTimeBetween(timeAsNumber, start, 2399) || isTimeBetween(timeAsNumber, 0, end);
        }
        return start <= timeAsNumber && timeAsNumber <= end;
    };
    $scope.onTimeFilterChanged = function(selectedTimeFilters) {
        console.log("onTimeFilterChanged in MeetingFiltersCtrl", selectedTimeFilters);
        var filterFunction = function(item) {
            var isValidTime = false;
            angular.forEach(selectedTimeFilters, function(timeFilter) {
                if (isTimeBetween(item.schedule.timeAsNumber, timeFilter.start, timeFilter.end)) {
                    isValidTime = true;
                }
            });
            return isValidTime;
        };
        filterService.setTimeFilter(filterFunction);
    };
} ]);

"use strict";

angular.module("filterModule").directive("orFilter", [ "$filter", function($filter) {
    return {
        template: "" + '<button ng-repeat="item in filterItems" ' + '        ng-click="toggle(item)" ' + '        ng-class="item.ngClass" ' + '        ui-show="item.selected">' + "  {{item.display}}" + "</button>",
        replace: true,
        restrict: "E",
        scope: {
            defaultFilterItems: "=",
            onFilterChanged: "&"
        },
        link: function postLink(scope, element, attrs) {
            var getSelectedFilters = function() {
                var selectedFilters = [];
                angular.forEach(scope.filterItems, function(item) {
                    if (item.selected) {
                        selectedFilters.push(item.filter);
                    }
                });
                if (selectedFilters.length === 0) {
                    angular.forEach(scope.filterItems, function(item) {
                        selectedFilters.push(item.filter);
                    });
                }
                return selectedFilters;
            };
            scope.toggle = function(item) {
                item.selected = !item.selected;
                scope.onFilterChanged({
                    selectedFilters: getSelectedFilters()
                });
            };
            scope.resetAll = function() {
                scope.filterItems = angular.copy(scope.defaultFilterItems);
                scope.onFilterChanged({
                    selectedFilters: getSelectedFilters()
                });
            };
            scope.resetAll();
        }
    };
} ]);

"use strict";

angular.module("filterModule").factory("filterService", [ "$rootScope", "$filter", "filterModuleInterface", function($rootScope, $filter, filterModuleInterface) {
    var serviceAPI = {};
    var dayFilter = function(item) {
        return true;
    };
    var fellowshipFilter = function(item) {
        return true;
    };
    var timeFilter = function(item) {
        return true;
    };
    var locationFilter = {
        useGeolocation: true,
        customAddress: ""
    };
    serviceAPI = angular.extend(serviceAPI, {
        setDayFilter: function(newDayFilter) {
            dayFilter = newDayFilter;
            filterModuleInterface.filterChanged();
        },
        setFellowshipFilter: function(newFellowshipFilter) {
            fellowshipFilter = newFellowshipFilter;
            filterModuleInterface.filterChanged();
        },
        setTimeFilter: function(newTimeFilter) {
            timeFilter = newTimeFilter;
            filterModuleInterface.filterChanged();
        },
        setLocationFilter: function(newLocationFilter) {
            var success = filterModuleInterface.processLocationFilter(newLocationFilter);
            console.log("setLocationFilter ", success);
            locationFilter = newLocationFilter;
            filterModuleInterface.locationFilterChanged();
        },
        getLocationFilter: function() {
            return locationFilter;
        },
        doSearch: function() {
            filterModuleInterface.searchButtonClicked();
        },
        filter: function(unfiltered) {
            var filtered = unfiltered;
            filtered = $filter("filter")(filtered, dayFilter);
            filtered = $filter("filter")(filtered, fellowshipFilter);
            filtered = $filter("filter")(filtered, timeFilter);
            return filtered;
        }
    });
    return serviceAPI;
} ]);